@page "/Candidates/CandidatesNames/Manage"

@inject IDbContextFactory<CandidateAppDbContext> _ContextFactory
@inject NavigationManager NavigationManagerInjector

@using VisualAcademy.Models.Candidates.CandidatesNames
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage ProtectedLocalStore

@inject IJSRuntime JSRuntime

@namespace VisualAcademy.Pages.Candidates.CandidatesNames

<PageTitle>CandidatesNames List</PageTitle>

<div class="row">
    <div id="pnlNames">
        <span class="fw-bold">Have you ever used or been known by any other name(s)?&nbsp;&nbsp;</span>
        <div class="form-check form-check-inline">
            <input class="form-check-input" type="radio" value="Yes" name="optNames" id="namesYes"
                   checked="@(blnNames == true)"
                   @onchange="@(() => { blnNames = !blnNames; })" />
            <label class="form-check-label" for="namesYes">Yes</label>
        </div>
        <div class="form-check form-check-inline">
            <input class="form-check-input" type="radio" value="No" name="optNames" id="namesNo"
                   checked="@(blnNames == false)"
                   @onchange="@(() => { blnNames = !blnNames; })" />
            <label class="form-check-label" for="namesNo">No</label>
        </div>
    </div>
</div>

@if (blnNames)
{
    <div class="row">
        <div class="col-md-12">
            If YES, list the additional name(s) below and specify dates of use for each name (include maiden name, aliases, nicknames, other name changes, legal or otherwise).
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <VisualAcademy.Pages.Candidates.CandidatesNames.Components.EditorForm Model="@Model" Busy="@Busy" OnSubmitCallback="@OnSubmitCallback">
            </VisualAcademy.Pages.Candidates.CandidatesNames.Components.EditorForm>
        </div>
    </div>

    @if (Models is null)
    {
        <div>Loading...</div>
    }
    else if (Models.Length > 0)
    {
        <hr />

        <div class="row">
            <div class="col-md-12">
                <table class="table table-striped table-bordered">
                    <thead>
                        <tr>
                            <th>
                                Last Name
                            </th>
                            <th>
                                First Name
                            </th>
                            <th>
                                Middle Name
                            </th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var m in Models)
                        {
                            <tr>
                                <td>
                                    @m.LastName
                                </td>
                                <td>
                                    @m.FirstName
                                </td>
                                <td>
                                    @m.MiddleName
                                </td>
                                <td class="text-center">
                                    <input type="button" class="btn btn-danger btn-sm" value="Delete"
                               @onclick="() => DeleteBy(m)" />
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
}

@code {
    // 부모 Component 또는 MVC, Razor Pages에서 넘어온 UserId 값을 받아 저장
    [Parameter]
    public string UserId { get; set; } = "945503cc-ed22-4914-b40b-661cdbc732ad";

    // names에 대해서 관리하는지 여부
    [Parameter]
    public bool UseOtherNames
    {
        get
        {
            return blnNames;
        }
        set
        {
            blnNames = value;
        }
    }

    private bool blnNames = true;

    // 현재 페이지에서 사용할 모델 또는 컬렉션
    private CandidateName[]? Models { get; set; }

    /// <summary>
    /// 페이지 사이즈: 한 페이지에 몇 개의 레코드를 보여줄건지 결정
    /// </summary>
    public int PageSize { get; set; } = 10;

    /// <summary>
    /// 페이지 번호: 현재 보여줄 페이지 번호: 1 페이지, 2 페이지, ...
    /// </summary>
    [Parameter]
    public int? Page { get; set; } = 1; // PageNumber

    /// <summary>
    /// 페이지 인덱스: 현재 보여줄 페이지 번호의 인덱스(PageNumber - 1)
    /// </summary>
    public int PageIndex { get; set; } = 0;

    /// <summary>
    /// 총 몇 개의 페이지가 만들어지는지: Math.Ceiling(총 레코드 수 / 10(한 페이지에서 보여줄))
    /// </summary>
    public int PageCount { get; set; } = 1;

    /// <summary>
    /// 레코드 카운트: 현재 테이블에 몇 개의 레코드가 있는지 지정
    /// </summary>
    public int RecordCount { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await DisplayData();
    }

    private async Task DisplayData()
    {
        if (Page is null or < 1)
        {
            Page = 1;
            return;
        }

        PageIndex = 0;

        using var context = _ContextFactory.CreateDbContext();

        RecordCount = await context.CandidatesNames.Where(ui => ui.UserId == UserId).CountAsync();

        PageCount = Convert.ToInt32(Math.Ceiling(RecordCount / (double)PageSize));
        if (PageCount == 0)
        {
            PageCount = 1;
        }

        Models = await context.CandidatesNames.Where(ui => ui.UserId == UserId).OrderByDescending(it => it.Id).ToArrayAsync();
    }

    protected async Task DeleteBy(CandidateName model)
    {
        bool isDelete = await JSRuntime.InvokeAsync<bool>(
            "confirm", "Are you sure you want to delete this?");
        if (isDelete)
        {
            try
            {
                using var context = _ContextFactory.CreateDbContext();
                context.CandidatesNames.Remove(model);
                await context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                // Empty
            }

            await DisplayData();
        }
    }

    public CandidateName? Model { get; set; }

    public string? StatusMessage { get; set; }

    public bool Busy { get; set; }

    protected override void OnInitialized()
    {
        Model = new();
    }

    protected async Task FormSubmit()
    {
        if (Busy)
        {
            return;
        }

        Busy = true;

        try
        {
            if (Model is not null)
            {
                using var ctx = _ContextFactory.CreateDbContext();
                Model.UserId = UserId;
                ctx.CandidatesNames.Add(Model);
                ctx.SaveChanges();

                StatusMessage = "Success";
            }
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error: {ex.Message}";
        }
        finally
        {
            Busy = false;

            Model = new();

            await DisplayData();
        }
    }

    protected void HandleInvalidSubmit() => StatusMessage = "";

    protected async Task OnSubmitCallback(bool isValid)
    {
        if (isValid)
        {
            await FormSubmit();
        }
        else
        {
            HandleInvalidSubmit();
        }
    }
}
